import lief

def get_phdr_byte_64()->list :
    return [
    0x06, 0x00, 0x00, 0x00,#p_type
    0x04, 0x00, 0x00, 0x00,#p_flag
    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,#p_offset
    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,#p_vaddr
    0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,#p_filesez
    0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]

def get_phdr_byte_32()->list :
    return [
    0x06, 0x00, 0x00, 0x00,#p_type
    0x34, 0x00, 0x00, 0x00,#p_offset
    0x34, 0x00, 0x00, 0x00,#p_vaddr
    0x34, 0x00, 0x00, 0x00,#p_filesez
    0x50, 0x00, 0x00, 0x00,
    0x04, 0x00, 0x00, 0x00,#p_flag
    0x50, 0x00, 0x00, 0x00]

def gen_loader_phdr(elf_exe: lief.ELF.Binary, phdr: lief.ELF.Segment, is_64: bool) :
    load_phdr             = lief.ELF.Segment()
    load_phdr.type        = lief.ELF.SEGMENT_TYPES.LOAD
    load_phdr.file_offset = phdr.file_offset
    elf_exe.add(load_phdr)

def gen_phdr(elf_exe: lief.ELF.Binary, is_64: bool) :
    phdr           = lief.ELF.Segment()
    phdr.type      = lief.ELF.SEGMENT_TYPES.PHDR
    phdr.alignment = 0x8
    phdr.flags     = lief.ELF.SEGMENT_FLAGS.R
    if is_64 :
        phdr.content = get_phdr_byte_64()
        phdr.file_offset = 0x40
        print("64 bits phdr")
    else :
        phdr.content = get_phdr_byte_32()
        phdr.file_offset = 0x34
        print("32 bits phdr")

    phdr = elf_exe.add(phdr)
#    load_phdr(elf_exe, phdr)


def load_content(phdr: lief.ELF.Segment, is_64: bool)->list :
    return [
    0x01, 0x00, 0x00, 0x00,
    0x30, 0x00, 0x00, 0x00,
    0x30, 0x00, 0x00, 0x00,
    0x18, 0x00, 0x00, 0x00,
    0x18, 0x00, 0x00, 0x00,
    0x04, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00
    ]

def load_phdr(elf_exe: lief.ELF.Binary) :
    loader = lief.ELF.Segment()
    loader.type = lief.ELF.SEGMENT_TYPES.LOAD
    loader.add(lief.ELF.SEGMENT_FLAGS.R)
    loader.file_offset = 0x50
    loader.physical_address = 0x34
    loader.physical_size = 0x18
    loader.virtual_address = 0x50
    loader.virtual_size = 0x18
    loader.alignment = 0x8

    elf_exe.add(loader)
